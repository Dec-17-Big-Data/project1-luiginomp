package com.revature.q3;

import java.io.IOException;

import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;

public class Q3Mapper extends Mapper <LongWritable, Text, Text, DoubleWritable> {
	//List the % of change in male employment from the year 2000.
	/*
	 * ASSUMPTIONS
	 * Includes all countries / worldwide
	 * All employment fields fall under agriculture, industry, and services
	 * Only compare 2000 to the most  recent year
	 * 
	 * APPROACH
	 * Lump all categories together
	 * Present results by country and its percentage
	 */
	
	@Override
	public void map(LongWritable inKey, Text inValue, Context context) throws IOException, InterruptedException{
		//Clean data of ",["]. Note, does not get rid of initial "
		String[] fields = inValue.toString().split("\",\"?");
		//Check if indicator code field contains codes for agriculture, industry, services
		if(fields[3].equals("SL.AGR.EMPL.MA.ZS") ||
				fields[3].equals("SL.IND.EMPL.MA.ZS") ||
				fields[3].equals("SL.SRV.EMPL.MA.ZS")){
			//Get rid of initial " and get country name
			String country = fields[0].substring(1);
			Double earliestEntry = null;
			//Get earliest entry since 2000
			for (int i = 44; i < fields.length - 1; i++){
				try{
					earliestEntry = Double.parseDouble(fields[i]);
					break;
				}catch (NullPointerException e){
					continue;
				}catch (NumberFormatException e){
					continue;
				}
			}
			//If no entries exist, write Country and 0 percentage
			if(earliestEntry == null){
				context.write(new Text(country), new DoubleWritable(0.0));
			}
			//Get latest entry
			Double latestEntry = null;
			for (int i = fields.length -1; i > 44; i--){
				try{
					latestEntry = Double.parseDouble(fields[i]);
					break;
				}catch (NullPointerException e){
					continue;
				}catch (NumberFormatException e){
					continue;
				}
			}
			Double change = (latestEntry - earliestEntry) / earliestEntry;
		}
	}
}
