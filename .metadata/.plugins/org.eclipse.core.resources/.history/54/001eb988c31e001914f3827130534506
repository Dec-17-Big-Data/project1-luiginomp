package com.revature.q2;

import java.io.IOException;

import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
/**
 * Reducer for MapReduce solution to Question 1.
 * Extends Reducer class from org.apache.hadoop.mapreduce.Reducerf.
 * @author Luigino Perez
 *
 */
public class Q2Reducer extends Reducer <Text, DoubleWritable, Text, DoubleWritable> {
	
	/**
	 * Assumes Mapper is emitting key-value pairs as Text, DoubleWritable
	 * 
	 * Checks if given information is for USA and if criteria involes female graduations for at least primary, at least secondary, or at least post-secondary.
	 * Calculates increase between each concurrent percentage and emits a key-value pair as graduation type and calculated increase.
	 * 
	 * @param key - LongWritable passed in during file input split
	 * @param value - Text represented as a line passed in during file input split
	 * @param context - Context object for entire job
	 */
	  @Override
	  public void reduce(Text key, Iterable<DoubleWritable> increases, Context context) throws IOException, InterruptedException {
		  //Calculate the average of increases by getting their sum and dividing by the count
		  Double sum = 0.0;
		  Integer counter = 0;
		  for(DoubleWritable increase : increases){
			  sum += increase.get();
			  counter += 1;
		  }
		  Double average = sum / counter;
		  context.write(new Text(key), new DoubleWritable(average));
	  }
}